delimiters "$", "$"

TemplateId() ::= <<AD9BA86D-0F33-44C7-933C-00D9D3527715>>
TemplateName() ::= <<Component>>
TemplateVersion() ::= <<1.0.1>>
TemplateConfiguration(model) ::= <<
$!
Copyright 2002-2019 Allors bvba.
Licensed under the Lesser General Public Licence v3 (LGPL)
For more information visit http://www.allors.com/legal
!$
<generations>
    $model.Project.LocalRoutedComponents:{component|<generation template="routedComponent" input="$component.Reference.Id$" output="$component.Reference.Namespace$.$component.Reference.Name$.g.cs"/>}$
    $model.Project.LocalNonRoutedScopedComponentsWithoutSelector:{component|<generation template="nonRoutedComponentWithoutSelector" input="$component.Reference.Id$" output="$component.Reference.Namespace$.$component.Reference.Name$.g.cs"/>}$
    $model.Project.LocalNonRoutedScopedComponentsWithSelector:{component|<generation template="nonRoutedComponentWithSelector" input="$component.Reference.Id$" output="$component.Reference.Namespace$.$component.Reference.Name$.g.cs"/>}$
</generations>
>>

routedComponent(model, directive) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.
namespace $directive.Reference.Namespace$
{
    using OpenQA.Selenium;
    using Components;

    public partial class $directive.Reference.Name$ : Components.RoutedComponent
    {
        public $directive.Reference.Name$(IWebDriver driver) : base(driver)
        {
        }

$directive.Testers:{tester|$tester(tester)$}; separator="\n"$
    }
}
>>

nonRoutedComponentWithoutSelector(model, directive) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.
namespace $directive.Reference.Namespace$
{
    using OpenQA.Selenium;
    using Components;

    public partial class $directive.Reference.Name$ : Components.EntryComponent
    {
        public $directive.Reference.Name$(IWebDriver driver) : base(driver)
        {
        }

$directive.Testers:{tester|$tester(tester)$}; separator="\n"$
    }
}
>>

nonRoutedComponentWithSelector(model, directive) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.
namespace $directive.Reference.Namespace$
{
    using OpenQA.Selenium;
    using Components;

    public partial class $directive.Reference.Name$ : Components.SelectorComponent
    {
        public $directive.Reference.Name$(IWebDriver driver, By selector) : base(driver)
        {
			this.Selector = selector;
        }

        public override By Selector { get; }

        public $directive.Reference.Name$ Click()
        {
            if(this.Selector != null){
                new Element(this.Driver, this.Selector).Click();
            }

            return this;
        }

$directive.Testers:{tester|$tester(tester)$}; separator="\n"$
    }
}
>>

tester(tester) ::= <<
$if(tester.IsInput)$
        public Components.Input $tester.Name$ => new Components.Input(this.Driver, "$tester.Kind$", @"$tester.Value$"$tester.Scopes:{scope|, "$scope$"}$);
$elseif(tester.IsButton)$
        public Components.Button $tester.Name$ => new Components.Button(this.Driver, "$tester.Kind$", @"$tester.Value$"$tester.Scopes:{scope|, "$scope$"}$);
$elseif(tester.IsA)$
        public Components.Anchor $tester.Name$ => new Components.Anchor(this.Driver, "$tester.Kind$", @"$tester.Value$"$tester.Scopes:{scope|, "$scope$"}$);
$elseif(tester.IsAMatFactoryFab)$
        public Components.MatFactoryFab $tester.Name$ => new Components.MatFactoryFab(this.Driver, Allors.Meta.M.$tester.ObjectType$.ObjectType, $tester.Selector$);
$tester.Factories:{factory|$factory(factory)$}; separator="\n"$
$elseif(tester.IsAMatTable)$
        public Components.MatTable $tester.Name$ => new Components.MatTable(this.Driver, $tester.Selector$);
$elseif(tester.IsAMatList)$
        public Components.MatList $tester.Name$ => new Components.MatList(this.Driver, $tester.Selector$);
$elseif(tester.IsAllorsMaterialSideMenuComponent)$
        public Tests.Sidenav Sidenav => new Tests.Sidenav(this.Driver);
$elseif(tester.IsRoleFieldTester)$
        public Components.$tester.Type$<$directive.Reference.Name$> $tester.Name$ => this.$tester.Type$(Allors.Meta.M.$tester.RoleType.AssociationType.ObjectType.Name$.$tester.RoleType.Name$$tester.Scopes:{scope|, "$scope$"}$);
$elseif(tester.Element.Component && tester.Element.Scope)$
        public $tester.Element.Component.Reference.Namespace$.$tester.Element.Component.Reference.Name$ $tester.Name$ => new $tester.Element.Component.Reference.Namespace$.$tester.Element.Component.Reference.Name$(this.Driver, $tester.Selector$);
$endif$
>>

factory(factory) ::= <<
$if(factory.Component)$
        public $factory.Component.Reference.Namespace$.$factory.Component.Reference.Name$ Create$factory.class.name$()
        {
            this.$factory.tester.Name$.Create(Allors.Meta.M.$factory.class.Name$);
            return new $factory.Component.Reference.Namespace$.$factory.Component.Reference.Name$(this.Driver);
        }
$endif$
>>
