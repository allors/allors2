delimiters "$", "$"

TemplateId() ::= <<07F63139-1791-4F55-AAED-F1A6D8D40055>>
TemplateName() ::= <<Allors C# Workspace Domain>>
TemplateVersion() ::= <<1.0.7>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta) ::= <<
$!
Copyright 2002-2016 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	$meta.WorkspaceInterfaces:{interface|<generation template="castInterface" input="$interface.Id $" output="$interface.SingularName$.g.cs"/>}$
	$meta.WorkspaceClasses:{class|<generation template="castClass" input="$class.Id $" output="$class.SingularName$.g.cs"/>}$
</generations>
>>

castInterface(meta, objectType) ::= <<
$interface(meta,objectType)$
>>

interface(meta,interface) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
$interface.XmlDocComment$
	public partial interface $interface.name$ : ISessionObject $if(interface.WorkspaceDirectSupertypes)$ $interface.WorkspaceDirectSupertypes:{directSupertype|, $directSupertype.SingularName$}$ $endif$
	{
$interface.WorkspaceExclusiveRoleTypes:{roleType|$interfaceRoleType()$}$

$interface.WorkspaceExclusiveAssociationTypes:{associationType|$interfaceAssociationType()$}; separator="\n"$

$interface.workspaceMethodTypes:{methodType|$interfaceMethodType()$}; separator="\n"$
	}
}
>>

interfaceRoleType() ::= <<
$\n$
$roleType.RelationType.XmlDocComment$
$if(roleType.ObjectType.IsUnit)$
		$roleType_ObjectType(roleType)$ $roleType.SingularPropertyName$
		{
			get;
$if(!roleType.RelationType.IsDerived)$
			set;
$endif$
		}

		bool Exist$roleType.SingularPropertyName${get;}

$if(!roleType.RelationType.IsDerived)$
		void Remove$roleType.SingularPropertyName$();
$endif$

$else$
$if(roleType.IsMany)$
		$roleType_ObjectType(roleType)$[] $roleType.PluralPropertyName$
		{
			get;
$if(!roleType.RelationType.IsDerived)$
			set;
$endif$
		}

$if(!roleType.RelationType.IsDerived)$
		void Add$roleType.SingularPropertyName$ ($roleType_ObjectType(roleType)$ value);

		void Remove$roleType.SingularPropertyName$ ($roleType_ObjectType(roleType)$ value);
$endif$

		bool Exist$roleType.PluralPropertyName$
		{
			get;
		}

		void Remove$roleType.PluralPropertyName$();
$else$
		$roleType_ObjectType(roleType)$ $roleType.SingularPropertyName$
		{
			get;
$if(!roleType.RelationType.IsDerived)$
			set;
$endif$
		}

		bool Exist$roleType.SingularPropertyName$
		{
			get;
		}

$if(!roleType.RelationType.IsDerived)$
		void Remove$roleType.SingularPropertyName$();
$endif$
$endif$
$endif$
>>

interfaceAssociationType() ::= <<

$if(associationType.IsOne)$
		$objectType_Name(associationType.ObjectType)$ $associationType.SingularPropertyName$
		{
			get;
		}
$else$
		$objectType_Name(associationType.ObjectType)$[] $associationType.PluralPropertyName$
		{
			get;
		}
$endif$
>>

interfaceMethodType() ::= <<
        bool CanExecute$methodType.Name$ { get; }

        Method $methodType.Name$ { get; }
>>

castClass(meta, objectType) ::= <<
$class(meta,objectType)$
>>

class(meta,class) ::= <<
// <auto-generated />
// Do not edit this file, changes will be overwritten.
namespace Allors.Workspace.Domain
{
$class.XmlDocComment$
	public partial class $class.name$ : SessionObject $class.WorkspaceDirectSupertypes:{directSupertype|, $directSupertype.SingularName$}$
	{
		public $class.name$(Session session)
		: base(session)
		{
		}

		public Allors.Workspace.Meta.Meta$class.name$ Meta
		{
			get
			{
				return Allors.Workspace.Meta.Meta$class.SingularName$.Instance;
			}
		}

		public static $class.name$ Instantiate (Session allorsSession, long allorsObjectId)
		{
			return ($class.name$) allorsSession.Get(allorsObjectId);
		}

		public override bool Equals(object obj)
        {
            var that = obj as SessionObject;
		    if (that == null)
		    {
		        return false;
		    }

		    return this.Id.Equals(that.Id);
        }

		public override int GetHashCode()
        {
            return this.Id.GetHashCode();
        }


$class.workspaceConcreteRoleTypes:{concreteRoleType|$classConcreteRoleType_Class()$}$

$class.workspaceAssociationTypes:{associationType|$classAssociationType()$}; separator="\n"$

$class.workspaceMethodTypes:{methodType|$classMethodType()$}; separator="\n"$
	}
}
>>

classMethodType() ::= <<
			public bool CanExecute$methodType.Name$
			{
				get
				{
					return this.CanExecute(this.Meta.$methodType.Name$);
				}
			}

			public Method $methodType.Name$
			{
				get
				{
					return new Method(this, this.Meta.$methodType.Name$);
				}
			}
>>

classConcreteRoleType_Class() ::= <<
		public bool CanRead$concreteRoleType.RoleType.PropertyName$
		{
			get
			{
				return this.CanRead(this.Meta.$concreteRoleType.RoleType.PropertyName$);
			}
		}

		public bool CanWrite$concreteRoleType.RoleType.PropertyName$
		{
			get
			{
				return this.CanWrite(this.Meta.$concreteRoleType.RoleType.PropertyName$);
			}
		}

$\n$
$concreteRoleType.RoleType.RelationType.XmlDocComment$
$if(concreteRoleType.RoleType.ObjectType.IsUnit)$
$if(concreteRoleType.IsRequiredOverride)$
$if(concreteRoleType.RoleType.ObjectType.IsBoolean ||
	concreteRoleType.RoleType.ObjectType.IsDateTime ||
	concreteRoleType.RoleType.ObjectType.IsDecimal ||
	concreteRoleType.RoleType.ObjectType.IsFloat ||
	concreteRoleType.RoleType.ObjectType.IsInteger ||
	concreteRoleType.RoleType.ObjectType.IsUnique)$
		$roleType_ObjectType(concreteRoleType.RoleType)$ $concreteRoleType.RoleType.AssociationType.ObjectType.Name$.$concreteRoleType.RoleType.SingularPropertyName$
		{
			get
			{
				return ($roleType_ObjectType(concreteRoleType.RoleType)$) this.Get(Meta.$concreteRoleType.RoleType.PropertyName$);
			}
			set
			{
				this.Set(Meta.$concreteRoleType.RoleType.PropertyName$, value);
			}
		}
$endif$
$endif$
		virtual public $concreteRoleType_ObjectType(concreteRoleType)$ $concreteRoleType.RoleType.SingularPropertyName$
		{
			get
			{
				return ($concreteRoleType_ObjectType(concreteRoleType)$) this.Get(Meta.$concreteRoleType.RoleType.PropertyName$);
			}
			set
			{
				this.Set(Meta.$concreteRoleType.RoleType.PropertyName$, value);
			}
		}

		virtual public bool Exist$concreteRoleType.RoleType.SingularPropertyName${
			get
			{
				return this.Exist(Meta.$concreteRoleType.RoleType.PropertyName$);
			}
		}

		virtual public void Remove$concreteRoleType.RoleType.SingularPropertyName$()
		{
			this.Set(Meta.$concreteRoleType.RoleType.PropertyName$, null);
		}
$else$
$if(concreteRoleType.RoleType.IsMany)$
		virtual public $concreteRoleType_ObjectType(concreteRoleType)$[] $concreteRoleType.RoleType.PluralPropertyName$
		{
			get
			{
				return ($concreteRoleType_ObjectType(concreteRoleType)$[])this.Get(Meta.$concreteRoleType.RoleType.PropertyName$);
			}
			set
			{
				this.Set(Meta.$concreteRoleType.RoleType.PropertyName$, value);
			}
		}

		virtual public void Add$concreteRoleType.RoleType.SingularPropertyName$ ($concreteRoleType_ObjectType(concreteRoleType)$ value)
		{
			this.Add(Meta.$concreteRoleType.RoleType.PropertyName$, value);
		}

		virtual public void Remove$concreteRoleType.RoleType.SingularPropertyName$ ($concreteRoleType_ObjectType(concreteRoleType)$ value)
		{
			this.Remove(Meta.$concreteRoleType.RoleType.PropertyName$, value);
		}

		virtual public bool Exist$concreteRoleType.RoleType.PluralPropertyName$
		{
			get
			{
				return this.Exist(Meta.$concreteRoleType.RoleType.PropertyName$);
			}
		}

		virtual public void Remove$concreteRoleType.RoleType.PluralPropertyName$()
		{
			this.Set(Meta.$concreteRoleType.RoleType.PropertyName$, null);
		}
$else$
		virtual public $concreteRoleType_ObjectType(concreteRoleType)$ $concreteRoleType.RoleType.SingularPropertyName$
		{
			get
			{
				return ($concreteRoleType_ObjectType(concreteRoleType)$) this.Get(Meta.$concreteRoleType.RoleType.PropertyName$);
			}
			set
			{
				this.Set(Meta.$concreteRoleType.RoleType.PropertyName$, value);
			}
		}

		virtual public bool Exist$concreteRoleType.RoleType.SingularPropertyName$
		{
			get
			{
				return this.Exist(Meta.$concreteRoleType.RoleType.PropertyName$);
			}
		}

		virtual public void Remove$concreteRoleType.RoleType.SingularPropertyName$()
		{
			this.Set(Meta.$concreteRoleType.RoleType.PropertyName$, null);
		}
$endif$
$endif$
>>

classAssociationType() ::= <<

$if(associationType.IsOne)$
		public $objectType_Name(associationType.ObjectType)$ $associationType.SingularPropertyName$
		{
            get
            {
                return this.GetAssociation<$objectType_Name(associationType.ObjectType)$>(Meta.$associationType.PropertyName$);
            }
		}
$else$
		public $objectType_Name(associationType.ObjectType)$[] $associationType.PluralPropertyName$
		{
            get
            {
                return this.GetAssociations<$objectType_Name(associationType.ObjectType)$>(Meta.$associationType.PropertyName$);
            }
		}
$endif$
>>

boolean(value) ::= "$if(value)$true$else$false$endif$"

roleType_ObjectType(roleType) ::= <%
$if(roleType.IsRequired)$
$objectType_Name(roleType.ObjectType)$
$else$
$objectType_NullableName(roleType.ObjectType)$
$endif$
%>

concreteRoleType_ObjectType(roleType) ::= <%
$if(concreteRoleType.IsRequired)$
$objectType_Name(concreteRoleType.RoleType.ObjectType)$
$else$
$objectType_NullableName(concreteRoleType.RoleType.ObjectType)$
$endif$
%>

objectType_Name(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean
$elseif(objectType.IsDecimal)$
	global::System.Decimal
$elseif(objectType.IsDateTime)$
	global::System.DateTime
$elseif(objectType.IsFloat)$
	global::System.Double
$elseif(objectType.IsInteger)$
	global::System.Int32
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>

objectType_NullableName(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean?
$elseif(objectType.IsDecimal)$
	global::System.Decimal?
$elseif(objectType.IsDateTime)$
	global::System.DateTime?
$elseif(objectType.IsFloat)$
	global::System.Double?
$elseif(objectType.IsInteger)$
	global::System.Int32?
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid?
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>
