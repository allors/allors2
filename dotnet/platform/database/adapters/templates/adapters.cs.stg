delimiters "$", "$"

TemplateId() ::= <<17ED40F8-BDF8-4A7C-9AE9-1C4D2AD6BA2B>>
TemplateName() ::= <<C# Adapters>>
TemplateVersion() ::= <<1.0.80>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta, grp) ::= <<
$!
Copyright 2002-2014 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	$meta.Interfaces:{interface|<generation template="castInterface" input="$interface.Id $" output="$interface.SingularName$.g.cs"/>}$
	$meta.Classes:{class|<generation template="castClass" input="$class.Id $" output="$class.SingularName$.g.cs"/>}$
	$meta.MethodTypes:{methodType|<generation template="methodType" input="$methodType.Id $" output="$methodType.FullName$.g.cs"/>}$
</generations>
>>

castInterface(meta, grp, objectType) ::= <<
$interface(meta,objectType)$
>>

interface(meta,interface) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial interface $interface.name$ : $if(interface.existDirectSupertypes)$ $interface.directSupertypes:{directSupertype|$directSupertype.SingularName$,}$ $endif$Allors.IObject
	{
$interface.exclusiveRoleTypes:{roleType|$interfaceExclusiveRoleType_Interface()$}$
$interface.exclusiveAssociationTypes:{associationType|$interfaceExclusiveAssociationType_Interface()$}$
$interface.exclusiveMethodTypes:{methodType|$interfaceExclusiveMethodType_Interface()$}$
	}

	public partial interface $interface.name$Builder : $interface.DirectSupertypes:{directSupertype|$directSupertype.Name$Builder ,}$ global::System.IDisposable
	{	
$interface.exclusiveRoleTypes:{roleType|$interfaceExclusiveRoleTypes_Builder()$}$
	}
}
>>

interfaceExclusiveAssociationType_Interface() ::= <<
$\n$
$if(associationType.IsMany)$
		global::Allors.Extent<$associationType.ObjectType.Name$> $associationType.PluralPropertyName$
		{ 
			get;
		}

		bool Exist$associationType.PluralPropertyName$
		{
			get;
		}
$else$
		$associationType.ObjectType.Name$ $associationType.SingularPropertyName$
		{
			get;
		}

		bool Exist$associationType.SingularPropertyName$
		{
			get;
		}
$endif$
>>

interfaceExclusiveRoleType_Interface() ::= <<
$\n$
$if(roleType.ObjectType.IsUnit)$
		$roleType_ObjectType(roleType)$ $roleType.SingularPropertyName$ 
		{
			get;
			set;
		}

		bool Exist$roleType.SingularPropertyName${get;}

		void Remove$roleType.SingularPropertyName$();
$else$
$if(roleType.IsMany)$
		global::Allors.Extent<$roleType_ObjectType(roleType)$> $roleType.PluralPropertyName$
		{ 
			get;
			set;
		}

		void Add$roleType.SingularPropertyName$ ($roleType_ObjectType(roleType)$ value);

		void Remove$roleType.SingularPropertyName$ ($roleType_ObjectType(roleType)$ value);

		bool Exist$roleType.PluralPropertyName$
		{
			get;
		}

		void Remove$roleType.PluralPropertyName$();
$else$
		$roleType_ObjectType(roleType)$ $roleType.SingularPropertyName$
		{ 
			get;
			set;
		}

		bool Exist$roleType.SingularPropertyName$
		{
			get;
		}

		void Remove$roleType.SingularPropertyName$();
$endif$
$endif$
>>

interfaceExclusiveMethodType_Interface() ::= <<
$\n$
		$methodType.FullName$ $methodType.Name$();
>>

interfaceExclusiveRoleTypes_Builder() ::= <<
$if(!roleType.RelationType.IsDerived)$
$if(roleType.ObjectType.IsUnit)$
		$objectType_NullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}
$else$
$if(roleType.IsOne)$
		$objectType_NullableName(roleType.ObjectType)$ $roleType.PropertyName$ {get;}

$else$
		
		global::System.Collections.Generic.List<$objectType_Name(roleType.ObjectType)$> $roleType.PropertyName$ {get;}		

$endif$
$endif$		
$endif$
>>


castClass(meta, grp, objectType) ::= <<
$class(meta,objectType)$
>>

class(meta,class) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class $class.name$ : Allors.IObject $class.directSupertypes:{directSupertype|, $directSupertype.SingularName$}$
	{
		public static readonly Allors.Meta.Meta$class.name$ Meta = Allors.Meta.Meta$class.name$.Instance;

		private readonly IStrategy strategy;

		public $class.name$(Allors.IStrategy strategy) 
		{
			this.strategy = strategy;
		}
		
		public long Id
		{
			get { return this.strategy.ObjectId; }
		}

		public IStrategy Strategy
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return this.strategy; }
        }

		public static $class.name$ Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return ($class.name$) allorsSession.Instantiate(allorsObjectId);		
		}

		public override bool Equals(object obj)
        {
            var typedObj = obj as IObject;
            return typedObj != null &&
                   typedObj.Strategy.ObjectId.Equals(this.Strategy.ObjectId) &&
                   typedObj.Strategy.Session.Database.Id.Equals(this.Strategy.Session.Database.Id);
        }

		public override int GetHashCode()
        {
            return this.Strategy.ObjectId.GetHashCode();
        }

$class.ConcreteRoleTypes:{concreteRoleType|$classConcreteRoleType_Class()$}$
$class.AssociationTypes:{associationType|$classAssociationType_Class()$}$
$class.MethodTypes:{methodType|$classMethodType_Method()$}$
	}
}
>>

classAssociationType_Class() ::= <<
$\n$
$if(associationType.IsMany)$
		virtual public global::Allors.Extent<$associationType.ObjectType.Name$> $associationType.PluralName$Where$associationType.roleType.SingularName$
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.$associationType.PropertyName$.RelationType);
			}
		}

		virtual public bool Exist$associationType.PluralName$Where$associationType.roleType.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.$associationType.PropertyName$.RelationType);
			}
		}
$else$
		virtual public $associationType.ObjectType.Name$ $associationType.SingularName$Where$associationType.roleType.SingularName$
		{ 
			get
			{
				return ($associationType.ObjectType.Name$) Strategy.GetCompositeAssociation(Meta.$associationType.PropertyName$.RelationType);
			}
		} 

		virtual public bool Exist$associationType.SingularName$Where$associationType.roleType.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.$associationType.PropertyName$.RelationType);
			}
		}
$endif$
>>

classConcreteRoleType_Class() ::= <<
$\n$
$if(concreteRoleType.RoleType.ObjectType.IsUnit)$
		virtual public $concreteRoleType_ObjectType(concreteRoleType)$ $concreteRoleType.RoleType.SingularPropertyName$ 
		{
			get
			{
				return ($concreteRoleType_ObjectType(concreteRoleType)$) Strategy.GetUnitRole(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType);
			}
			set
			{
				Strategy.SetUnitRole(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType, value);
			}
		}

		virtual public bool Exist$concreteRoleType.RoleType.SingularPropertyName${
			get
			{
				return Strategy.ExistUnitRole(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType);
			}
		}

		virtual public void Remove$concreteRoleType.RoleType.SingularPropertyName$()
		{
			Strategy.RemoveUnitRole(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType);
		}
$else$
$if(concreteRoleType.RoleType.IsMany)$
		virtual public global::Allors.Extent<$concreteRoleType_ObjectType(concreteRoleType)$> $concreteRoleType.RoleType.PluralPropertyName$
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType, value);
			}
		}

		virtual public void Add$concreteRoleType.RoleType.SingularPropertyName$ ($concreteRoleType_ObjectType(concreteRoleType)$ value)
		{
			Strategy.AddCompositeRole(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType, value);
		}

		virtual public void Remove$concreteRoleType.RoleType.SingularPropertyName$ ($concreteRoleType_ObjectType(concreteRoleType)$ value)
		{
			Strategy.RemoveCompositeRole(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType, value);
		}

		virtual public bool Exist$concreteRoleType.RoleType.PluralPropertyName$
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType);
			}
		}

		virtual public void Remove$concreteRoleType.RoleType.PluralPropertyName$()
		{
			Strategy.RemoveCompositeRoles(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType);
		}
$else$
		virtual public $concreteRoleType_ObjectType(concreteRoleType)$ $concreteRoleType.RoleType.SingularPropertyName$
		{ 
			get
			{
				return ($concreteRoleType_ObjectType(concreteRoleType)$) Strategy.GetCompositeRole(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType, value);
			}
		}

		virtual public bool Exist$concreteRoleType.RoleType.SingularPropertyName$
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType);
			}
		}

		virtual public void Remove$concreteRoleType.RoleType.SingularPropertyName$()
		{
			Strategy.RemoveCompositeRole(Meta.$concreteRoleType.RoleType.PropertyName$.RelationType);
		}
$endif$
$endif$
>>

classMethodType_Method() ::= <<
$\n$
		public $methodType.FullName$ $methodType.Name$()
		{ 
			return new $class.Name$$methodType.Name$(this);
		}
>>

methodType(meta, grp, methodType) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
$if(methodType.ObjectType.IsClass)$
	public partial class $methodType.FullName$ : Allors.Meta.Method
	{
	    private static readonly Allors.Meta.MethodInvocation $methodType.FullName$Invocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.$methodType.ObjectType.SingularName$.ObjectType, Allors.Meta.M.$methodType.ObjectType.SingularName$.$methodType.Name$); 

		public $methodType.FullName$($objectType_Name(methodType.ObjectType)$ @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return $methodType.FullName$Invocation;
			}
		}

		public override void Execute()
		{
            MethodInvocation.Execute(this);
		}
	}
$else$
	public abstract partial class $methodType.FullName$ : Allors.Meta.Method
	{
		protected $methodType.FullName$($objectType_Name(methodType.ObjectType)$ @object) : base(@object)
		{
		}
	}

$methodType.ObjectType.Classes:{class|$methodTypeLeafClass()$}$
$endif$
}
>>

methodTypeLeafClass() ::= <<
	public partial class $class.Name$$methodType.Name$ : $methodType.FullName$
	{
		private static readonly Allors.Meta.MethodInvocation $class.Name$$methodType.Name$MethodInvocation = new Allors.Meta.MethodInvocation(Allors.Meta.M.$class.SingularName$.ObjectType, Allors.Meta.M.$class.SingularName$.$methodType.Name$); 

		public $class.Name$$methodType.Name$($objectType_Name(methodType.ObjectType)$ @object) : base(@object)
		{
		}

		public override Allors.Meta.MethodInvocation MethodInvocation
		{
			get
			{
				return $class.Name$$methodType.Name$MethodInvocation;
			}
		}
	
		public override void Execute()
		{
            MethodInvocation.Execute(this);
		}
	}
>>


boolean(value) ::= "$if(value)$true$else$false$endif$"

roleType_ObjectType(roleType) ::= <%
$objectType_NullableName(roleType.ObjectType)$
%>

concreteRoleType_ObjectType(roleType) ::= <%
$objectType_NullableName(concreteRoleType.RoleType.ObjectType)$
%>

objectType_Name(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean
$elseif(objectType.IsDecimal)$
	global::System.Decimal
$elseif(objectType.IsDateTime)$
	global::System.DateTime
$elseif(objectType.IsFloat)$
	global::System.Double
$elseif(objectType.IsInteger)$
	global::System.Int32
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>

objectType_NullableName(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean?
$elseif(objectType.IsDecimal)$
	global::System.Decimal?
$elseif(objectType.IsDateTime)$
	global::System.DateTime?
$elseif(objectType.IsFloat)$
	global::System.Double?
$elseif(objectType.IsInteger)$
	global::System.Int32?
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid?
$else$
not found ...
$endif$
$else$
	$objectType.SingularName$
$endif$
%>
