delimiters "$", "$"

TemplateId() ::= <<2FD8EE5D-4976-484F-96F9-9474AE09BFDB>>
TemplateName() ::= <<Allors Typescript Meta>>
TemplateVersion() ::= <<1.0.12>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(meta) ::= <<
$!
Copyright 2002-2017 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
    <generation template="index" output="index.ts"/>
    <generation template="domain" output="domain.g.ts"/>
    <generation template="tree" output="tree.g.ts"/>
    <generation template="fetch" output="fetch.g.ts"/>
    <generation template="pull" output="pull.g.ts"/>
    <generation template="ids" output="ids.g.ts"/>
    <generation template="data" output="data.g.ts"/>
</generations>
>>

index(meta) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.

export {
    Meta,
    $meta.WorkspaceComposites:{composite|	Meta$composite$}; separator=",\n"$
} from './domain.g';

export { ids} from './ids.g';
export * from './tree.g';
export * from './fetch.g';
export * from './pull.g';

export { data } from './data.g';

>>

domain(meta) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.
// tslint:disable:no-empty-interface
import { MetaPopulation, ObjectType, MethodType, RoleType, AssociationType } from '@allors/meta/system';

export interface Meta extends MetaPopulation {
$meta.WorkspaceComposites:{composite|    $composite.SingularName$: Meta$composite.SingularName$;}; separator="\n"$
}

$meta.WorkspaceComposites:{composite|$metaComposite(composite)$}; separator="\n\n"$

>>

metaComposite(composite) ::= <<
export interface Meta$composite.SingularName$ extends ObjectType {
$composite.WorkspaceRoleTypes:{role|    $role.Name$: RoleType;}; separator="\n"$
$composite.WorkspaceAssociationTypes:{association|    $association.PropertyName$: AssociationType;}; separator="\n"$
$composite.WorkspaceMethodTypes:{method|    $method.Name$: MethodType;}; separator="\n"$
}
>>

tree(meta) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.
// tslint:disable:no-empty-interface
// tslint:disable:no-consecutive-blank-lines
import { Tree } from '@allors/data/system';
import { Meta } from './domain.g';

export class TreeFactory {
    constructor(private meta: Meta) {
    }

$meta.WorkspaceComposites:{composite|$treeFactory(composite)$}; separator="\n\n"$
}

$meta.WorkspaceComposites:{composite|$treeComposite(composite)$}; separator="\n\n"$

>>

treeFactory(composite) ::= <<
    public $composite.Name$(literal: Tree$composite.Name$): Tree {
        return new Tree(this.meta.$composite.SingularName$, literal);
    }
>>

treeComposite(composite) ::= <<
export interface Tree$composite.SingularName$ {
$composite.WorkspaceCompositeRoleTypes:{role|    $role.Name$?: Tree | Tree$role.ObjectType.Name$;}; separator="\n"$
$composite.WorkspaceAssociationTypes:{association|    $association.PropertyName$?: Tree | Tree$association.ObjectType.Name$;}; separator="\n"$

$composite.WorkspaceSubtypes:{type|$treeSubType(type)$}$
}

>>

treeSubType(type) ::= <<

$type.WorkspaceCompositeRoleTypes:{role|    $type.Name$_$role.Name$?: Tree$role.ObjectType.Name$;}; separator="\n"$
$type.WorkspaceAssociationTypes:{association|    $type.Name$_$association.PropertyName$?: Tree$association.ObjectType.Name$;}; separator="\n"$

>>


fetch(meta) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.
// tslint:disable:no-empty-interface
// tslint:disable:no-consecutive-blank-lines
import { Fetch, Tree } from '@allors/data/system';
import { $meta.WorkspaceComposites:{composite|Tree$composite.Name$}; separator=", "$ } from './tree.g';
import { Meta } from './domain.g';

export class FetchFactory {
    constructor(private meta: Meta) {
    }

$meta.WorkspaceComposites:{composite|$fetchFactory(composite)$}; separator="\n\n"$
}

$meta.WorkspaceComposites:{composite|$fetchComposite(composite)$}; separator="\n\n"$

>>

fetchFactory(composite) ::= <<
    public $composite.Name$(literal: Fetch$composite.Name$): Fetch {
        return new Fetch(this.meta.$composite.SingularName$, literal);
    }
>>

fetchComposite(composite) ::= <<
export interface Fetch$composite.SingularName$ {
$composite.WorkspaceCompositeRoleTypes:{role|    $role.Name$?: Fetch | Fetch$role.ObjectType.Name$;}; separator="\n"$

$composite.WorkspaceAssociationTypes:{association|    $association.PropertyName$?: Fetch | Fetch$association.ObjectType.Name$;}; separator="\n"$

$composite.WorkspaceSubtypes:{subtype|$fetchSubtype(subtype)$}$

   include?: Tree | Tree$composite.SingularName$;
}
>>

fetchSubtype(subtype) ::= <<

$subtype.WorkspaceExclusiveCompositeRoleTypes:{role|    $subtype.Name$_$role.Name$?: Fetch | Fetch$role.ObjectType.Name$;}; separator="\n"$

$subtype.WorkspaceExclusiveAssociationTypes:{association|    $subtype.Name$_$association.PropertyName$?: Fetch | Fetch$association.ObjectType.Name$;}; separator="\n"$

>>

pull(meta) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.
// tslint:disable:no-empty-interface
// tslint:disable:no-consecutive-blank-lines
import { Meta } from './domain.g';
import { Pull, FlatPull, Fetch, Tree } from '@allors/data/system';
import { $meta.WorkspaceComposites:{composite|Fetch$composite.Name$}; separator=", "$ } from './fetch.g';
import { $meta.WorkspaceComposites:{composite|Tree$composite.Name$}; separator=", "$ } from './tree.g';

export class PullFactory {
    constructor(private meta: Meta) {
    }

$meta.WorkspaceComposites:{composite|$pullFactory(composite)$}; separator="\n\n"$
}

$meta.WorkspaceComposites:{composite|$pullComposite(composite)$}; separator="\n\n"$

>>

pullFactory(composite) ::= <<
    public $composite.Name$(literal?: Pull$composite.Name$): Pull {
        return new Pull(this.meta.$composite.SingularName$, literal);
    }
>>

pullComposite(composite) ::= <<
export interface Pull$composite.SingularName$ extends FlatPull {
    fetch?: Fetch | Fetch$composite.SingularName$;

    include?: Tree | Tree$composite.SingularName$;
}
>>

ids(meta) ::= <<
// Allors generated file.
// Do not edit this file, changes will be overwritten.
// tslint:disable:object-literal-sort-keys

export const ids = {
$meta.Units:{unit|  $unit.Name$: '$unit.IdAsString$',}; separator="\n"$
$meta.WorkspaceComposites:{composite|  $composite.Name$: '$composite.IdAsString$',}; separator="\n"$
};
>>


data(meta) ::= <<
import { MetaData } from "@allors/meta/system";

export const data: MetaData = { domains: [], interfaces: [], classes: [], relationTypes: [], methodTypes: [] };

const { domains, interfaces, classes, relationTypes, methodTypes } = data;

$meta.SortedDomains:{domain|domains.push("$domain.Name$");}; separator="\n"$

$meta.WorkspaceInterfaces:{interface|$interface(interface)$}; separator="\n"$

$meta.WorkspaceClasses:{class|$class(class)$}; separator="\n"$

$meta.WorkspaceRelationTypes:{relationType|$relationType(relationType)$}; separator="\n"$

$meta.WorkspaceMethodTypes:{methodType|$methodType(methodType)$}; separator="\n"$
>>

interface(interface) ::= <<
interfaces.push({
      id: "$interface.IdAsString$",
      name: "$interface.Name$",
      plural: "$interface.PluralName$"$if(interface.WorkspaceSupertypes)$,
      interfaceIds:
        [
$interface.WorkspaceSupertypes:{interface|            "$interface.IdAsString$"}; separator=",\n"$
        ]
$endif$
    });
>>

class(class) ::= <<
classes.push({
      id: "$class.IdAsString$",
      name: "$class.Name$",
      plural: "$class.PluralName$"$if(class.WorkspaceSupertypes)$,
      interfaceIds:
        [
$class.WorkspaceSupertypes:{interface|            "$interface.IdAsString$"}; separator=",\n"$
        ]
$endif$
    });
>>

relationType(relationType) ::= <<
relationTypes.push({
      id: "$relationType.IdAsString$",
      associationType: {
        id: "$relationType.AssociationType.IdAsString$",
        objectTypeId: "$relationType.AssociationType.ObjectType.IdAsString$",
        name: "$relationType.AssociationType.PropertyName$",
        isOne: $boolean(relationType.AssociationType.IsOne)$
      },
      roleType: {
        id: "$relationType.RoleType.IdAsString$",
        objectTypeId: "$relationType.RoleType.ObjectType.IdAsString$",
        singular: "$relationType.RoleType.SingularPropertyName$",
        plural: "$relationType.RoleType.PluralPropertyName$",
        isUnit: $boolean(relationType.RoleType.ObjectType.IsUnit)$,
        isOne: $boolean(relationType.RoleType.IsOne)$,
        isRequired: $boolean(relationType.RoleType.IsRequired)$$if(relationType.RoleType.MediaType)$,
        mediaType: "$relationType.RoleType.MediaType$"
$endif$

      },
$if(relationType.ConcreteRoleTypes)$
      concreteRoleTypes:
        [
$relationType.ConcreteRoleTypes:{concreteRoleType|$concreteRoleType(concreteRoleType)$}; separator=",\n"$
        ],
$endif$
      isDerived: $boolean(relationType.IsDerived)$
    });
>>

concreteRoleType(concreteRoleType) ::= <<
          {
            objectTypeId: "$concreteRoleType.Class.IdAsString$",
            isRequired: $boolean(concreteRoleType.IsRequired)$
          }
>>

methodType(methodType) ::= <<
methodTypes.push({
      id: "$methodType.id$",
      objectTypeId: "$methodType.ObjectType.IdAsString$",
      name: "$methodType.name$"
    });
>>

boolean(value) ::= "$if(value)$true$else$false$endif$"
